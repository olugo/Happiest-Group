<<<<<<< HEAD
count() %>%
arrange(-n)
colnames(table) <- c(input$analysis_var, "num_killed") # format column names
table # return the table
})
}
# Start running the application
shinyApp(ui = my_ui, server = my_server)
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
install.packages("maps")
install.packages("mapproj")
install.packages("plotly")
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(las_vegas) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
tate_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
library(ggplot2)
library(dplyr)
library(knitr)
shootings_summary <- read.csv("data/shootings-2018.csv", stringsAsFactors=FALSE)
# Summary Information
# How many shootings occurred? = total_shootings
total_shootings <- nrow(shootings_summary)
# How many lives were lost? = lives_lost
lives_lost <- shootings_summary %>%
select(num_killed) %>%
summarize(total = sum(num_killed)) %>%
pull(total)
# Which city was most impacted by shootings
# (make sure to clarify  how you are measuring "impact")?
most_impacted_city <- shootings_summary %>%
group_by(city) %>%
select(city, num_injured, num_killed) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
filter(total_hurt == max(total_hurt)) %>%
select(city) %>%
pull(city)
# State with most shootings
state_most_shootings <- shootings_summary %>%
select(state) %>%
count(state) %>%
filter(n == max(n)) %>%
select(state) %>%
pull(state)
# Average number of people injured during each shooting
mean_injured <- shootings_summary %>%
select(num_injured) %>%
summarize(avg = round(mean(num_injured), digit = 0)) %>%
pull (avg)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Interactive Map Begins
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/a5-olugo")
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/a5-olugo")
getwd()
library(ggplot2)
library(dplyr)
library(knitr)
shootings_summary <- read.csv("data/shootings-2018.csv", stringsAsFactors=FALSE)
# Summary Information
# How many shootings occurred? = total_shootings
total_shootings <- nrow(shootings_summary)
# How many lives were lost? = lives_lost
lives_lost <- shootings_summary %>%
select(num_killed) %>%
summarize(total = sum(num_killed)) %>%
pull(total)
# Which city was most impacted by shootings
# (make sure to clarify  how you are measuring "impact")?
most_impacted_city <- shootings_summary %>%
group_by(city) %>%
select(city, num_injured, num_killed) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
filter(total_hurt == max(total_hurt)) %>%
select(city) %>%
pull(city)
# State with most shootings
state_most_shootings <- shootings_summary %>%
select(state) %>%
count(state) %>%
filter(n == max(n)) %>%
select(state) %>%
pull(state)
# Average number of people injured during each shooting
mean_injured <- shootings_summary %>%
select(num_injured) %>%
summarize(avg = round(mean(num_injured), digit = 0)) %>%
pull (avg)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Interactive Map Begins
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/happiest-group")
df17 <- read.csv("data/world-happiness/2017.csv")
View(df17)
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = "Freedom"))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = 'Freedom'))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = 'Happiness.Score'))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = `Freedom`))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
shiny::runApp()
=======
geom_smooth(mapping = aes(x = carat, y = price))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut, alpha = 0.3)) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut, alpha = 0.3)) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
my_ui <- fluidPage(
theme = "style.css",
navbarPage(
"Happiest Countries Data",
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image)),
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
)
),
tabPanel(
"Country Map",
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "gdp",
label = "GDP per capita",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "life_exp",
label = "Life expectancy",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "freedom",
label = "Freedom score",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "generosity",
label = "Generosity",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "happy",
label = "Happiness",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
)
),
mainPanel(
tableOutput(
outputId = "name"
),
leafletOutput("world_map")
,"This map does not highlight Singapore,
Bahrain, Mauritius, and Hong Kong SAR China"
)
)
),
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image))
runApp()
"Happiest Countries Data",
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image)),
tabPanel(
}
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
my_ui <- fluidPage(
theme = "style.css",
navbarPage(
"Happiest Countries Data",
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image)),
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
)
),
tabPanel(
"Country Map",
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "gdp",
label = "GDP per capita",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "life_exp",
label = "Life expectancy",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "freedom",
label = "Freedom score",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "generosity",
label = "Generosity",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "happy",
label = "Happiness",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
)
),
mainPanel(
tableOutput(
outputId = "name"
),
leafletOutput("world_map")
,"This map does not highlight Singapore,
Bahrain, Mauritius, and Hong Kong SAR China"
)
)
),
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
)
my_ui <- fluidPage(
theme = "style.css",
navbarPage(
"Happiest Countries Data",
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image)),
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
)
),
tabPanel(
"Country Map",
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "gdp",
label = "GDP per capita",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "life_exp",
label = "Life expectancy",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "freedom",
label = "Freedom score",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "generosity",
label = "Generosity",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "happy",
label = "Happiness",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
)
),
mainPanel(
tableOutput(
outputId = "name"
),
leafletOutput("world_map")
,"This map does not highlight Singapore,
Bahrain, Mauritius, and Hong Kong SAR China"
)
)
),
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
)
}
runApp()
runApp()
runApp()
runApp()
my_ui <- fluidPage(
theme = "style.css",
navbarPage(
"Happiest Countries Data",
tabPanel("Introduction",
mainPanel ("Through investigating the data, we want to know that how different factors would influence people's happiness score.
The data we are using is called World Happiness Index. The World Happiness Index measures happiness based on respondent's ratings of their own lives.
The report offers a way to measure people's quality of life and the effectiveness of the governments beyond gross domestic product and other economic indicators.
By focusing on national well being, a country can take a more wholistic approach to improving their populace's lives.
The United Nations conducts the survey based on a ladder system by asking respondents to rate the best possible life at 10 and the worst possible life being a 0.
Respondents from 155 countries are then asked to rate their own current lives on that 0 to 10 scale."
),
img(src = image)),
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
)
),
tabPanel(
"Country Map",
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "gdp",
label = "GDP per capita",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "life_exp",
label = "Life expectancy",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "freedom",
label = "Freedom score",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "generosity",
label = "Generosity",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
),
sliderInput(
inputId = "happy",
label = "Happiness",
min = 0,
max = 10,
value = 5,
round = -2,
step = 0.1
)
),
mainPanel(
tableOutput(
outputId = "name"
),
leafletOutput("world_map")
,"This map does not highlight Singapore,
Bahrain, Mauritius, and Hong Kong SAR China"
)
)
),
tabPanel("Summary",
mainPanel ("We selected some factors that influence the World Happiness
Index to analysis, and drew a country map to more directly present the factors
and the happiness score in the corresponding countries.
We first chose the generosity and happiness score and tried to find
out the correlation between them. In the chart we present, we only chose 10 countries,
so perhaps there is no obvious correlation that when a country has a high generosity score,
it will has a high happiness score. But we can roughly see that happiness socres are higher
when generosity score is higher from the trend presented (with a few exceptions).
Then we chose the freedom and happiness score.
Finally we did a country map to collet and show factor GDP, life expecticy, freedom
generosity and happiness scores.
"
)
runApp()
runApp()
>>>>>>> 3ce543349bc7a0a07fe0cb2430a5f44167499770
