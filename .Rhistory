count() %>%
arrange(-n)
colnames(table) <- c(input$analysis_var, "num_killed") # format column names
table # return the table
})
}
# Start running the application
shinyApp(ui = my_ui, server = my_server)
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
install.packages("maps")
install.packages("mapproj")
install.packages("plotly")
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(las_vegas) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
tate_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
library(ggplot2)
library(dplyr)
library(knitr)
shootings_summary <- read.csv("data/shootings-2018.csv", stringsAsFactors=FALSE)
# Summary Information
# How many shootings occurred? = total_shootings
total_shootings <- nrow(shootings_summary)
# How many lives were lost? = lives_lost
lives_lost <- shootings_summary %>%
select(num_killed) %>%
summarize(total = sum(num_killed)) %>%
pull(total)
# Which city was most impacted by shootings
# (make sure to clarify  how you are measuring "impact")?
most_impacted_city <- shootings_summary %>%
group_by(city) %>%
select(city, num_injured, num_killed) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
filter(total_hurt == max(total_hurt)) %>%
select(city) %>%
pull(city)
# State with most shootings
state_most_shootings <- shootings_summary %>%
select(state) %>%
count(state) %>%
filter(n == max(n)) %>%
select(state) %>%
pull(state)
# Average number of people injured during each shooting
mean_injured <- shootings_summary %>%
select(num_injured) %>%
summarize(avg = round(mean(num_injured), digit = 0)) %>%
pull (avg)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Interactive Map Begins
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/a5-olugo")
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/a5-olugo")
getwd()
library(ggplot2)
library(dplyr)
library(knitr)
shootings_summary <- read.csv("data/shootings-2018.csv", stringsAsFactors=FALSE)
# Summary Information
# How many shootings occurred? = total_shootings
total_shootings <- nrow(shootings_summary)
# How many lives were lost? = lives_lost
lives_lost <- shootings_summary %>%
select(num_killed) %>%
summarize(total = sum(num_killed)) %>%
pull(total)
# Which city was most impacted by shootings
# (make sure to clarify  how you are measuring "impact")?
most_impacted_city <- shootings_summary %>%
group_by(city) %>%
select(city, num_injured, num_killed) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
filter(total_hurt == max(total_hurt)) %>%
select(city) %>%
pull(city)
# State with most shootings
state_most_shootings <- shootings_summary %>%
select(state) %>%
count(state) %>%
filter(n == max(n)) %>%
select(state) %>%
pull(state)
# Average number of people injured during each shooting
mean_injured <- shootings_summary %>%
select(num_injured) %>%
summarize(avg = round(mean(num_injured), digit = 0)) %>%
pull (avg)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Specific Incident - City with the worst incident
city_worst <- shootings_summary %>%
filter(num_killed == max(num_killed)) %>%
group_by(city) %>%
pull(city)
# How many people killed at Parkland?
city_num_shooting <- shootings_summary %>%
select(num_killed) %>%
summarize(total = max(num_killed)) %>%
pull (total)
# How many people killed and injured at Parkland?
city_total <- shootings_summary %>%
select(city, num_injured, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
summarize(total_hurt = sum(num_injured) + sum(num_killed)) %>%
select(total_hurt) %>%
pull(total_hurt)
# What was the date of the worst shooting?
date_worst <- shootings_summary %>%
select(date, city, num_killed) %>%
filter(num_killed == max(num_killed)) %>%
select(date) %>%
pull(date)
# Interactive Map Begins
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
state_shape <- map_data("state")
map_us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group),
color = "white", size = .1
) +
geom_point(
data = shootings_summary %>% mutate(total_hurt = num_injured + num_killed),
mapping = aes(
x = long, y = lat, size = total_hurt,
text = paste(
"City:", city, "<br>",
"Injured", num_injured, "<br>",
"Killed", num_killed, "<br>"
)
),
color = "violet",
) +
labs(
title = "Mass Shootings in the U.S. - 2018",
x = "Longitude",
y = "Latitude"
) +
coord_map()
# ggplotly(map_us) to render
# Addtional Plot - Las Vegas Stats
las_vegas <- shootings_summary %>%
select(date, city, num_injured, num_killed) %>%
filter(city == "Las Vegas") %>%
gather(key = killed_and_injured, value = people, -date, -city)
chicago_stats <- ggplot(state_shape) +
geom_col(mapping = aes(
x = substr(date, 1, 3), y = people,
fill = killed_and_injured
)) +
labs(
title = "Las Vegas Mass Shootings - 2018",
x = "Month",
y = "People"
)
library(ggplot2)
library(maps)
library(mapproj)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/happiest-group")
df17 <- read.csv("data/world-happiness/2017.csv")
View(df17)
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = "Freedom"))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = 'Freedom'))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = 'Happiness.Score'))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
# Calling in the various libraries I'll be using -
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(knitr)
df17 <- read.csv("data/world-happiness/2017.csv")
#  A world map color-coded by each country’s overall happiness score in 2017
worldmap <- map_data("world")
names(worldmap)[names(worldmap)=="region"] <- "Country"
worldmap$Country[worldmap$Country == "USA"] <- "United States"
happy_world <- df17 %>%
full_join(worldmap, by = "Country")
map_theme <- theme(
axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = happy_world, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = `Freedom`))  +
scale_fill_continuous(low="light blue", high="dark blue", na.value="snow2") +
coord_quickmap() +
labs(title = "Happiness Around the World - 2017") +
map_theme
shiny::runApp()
