"Happiness Score and Generosity in Top 10 Countries",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"))
)
)
)
)
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
#happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
#names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
#head(happy_vs_gen)
#happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- gener_vs_score$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 8)
} else {
y <- gener_vs_score$Generosity
yaxis <- "Generosity"
range <- c(0, 8)
}
my_plot <- plot_ly(
gener_vs_score,
x = gener_vs_score$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "Happiness Rank and Generosity"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
library(dplyr)
library(shiny)
library(plotly)
ui <- fluidPage(
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"))
)
)
)
)
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
#happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
#names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
#head(happy_vs_gen)
#happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- gener_vs_score$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 8)
} else {
y <- gener_vs_score$Generosity
yaxis <- "Generosity"
range <- c(0, .9)
}
my_plot <- plot_ly(
gener_vs_score,
x = gener_vs_score$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "Happiness Rank and Generosity"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
#happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
#names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
#head(happy_vs_gen)
#happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- gener_vs_score$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 10)
} else {
y <- gener_vs_score$Generosity
yaxis <- "Generosity Score"
range <- c(0, .9)
}
my_plot <- plot_ly(
gener_vs_score,
x = gener_vs_score$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "of 10 Happiest Countries"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
library(dplyr)
library(shiny)
library(plotly)
ui <- fluidPage(
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"))
)
)
)
)
runApp()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
head(happy_vs_gen)
happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- happy_vs_gen$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 10)
} else {
y <- happy_vs_gen$Generosity
yaxis <- "Generosity Score"
range <- c(0, .9)
}
my_plot <- plot_ly(
happy_vs_gen,
x = happy_vs_gen$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "of 10 Happiest Countries"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
library(dplyr)
library(shiny)
library(plotly)
ui <- fluidPage(
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"))
)
)
)
)
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
head(happy_vs_gen)
happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 100
if(input$rank == "Happiness Score"){
y <- happy_vs_gen$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 10)
} else {
y <- happy_vs_gen$Generosity
yaxis <- "Generosity Score"
range <- c(0, 10)
}
my_plot <- plot_ly(
happy_vs_gen,
x = happy_vs_gen$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "of 10 Happiest Countries"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
head(happy_vs_gen)
happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- happy_vs_gen$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 10)
} else {
y <- happy_vs_gen$Generosity
yaxis <- "Generosity Score"
range <- c(0, 10)
}
my_plot <- plot_ly(
happy_vs_gen,
x = happy_vs_gen$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "of 10 Happiest Countries"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
full_data <- read.csv("data/world-happiness/2017.csv", stringsAsFactors = FALSE)
server <- function(input, output){
output$countries <- renderPlotly({
gener_vs_score <- full_data %>%
filter(rank(desc(Country)) <= 10)
happy_vs_gen <- (subset(gener_vs_score[,c("Country","Happiness.Score","Generosity")]))
names(happy_vs_gen) <- c("Country","Happiness.Score", "Generosity")
head(happy_vs_gen)
happy_vs_gen$Generosity <- happy_vs_gen$Generosity * 10
if(input$rank == "Happiness Score"){
y <- happy_vs_gen$Happiness.Score
yaxis <- "Happiness Scores"
range <- c(0, 10)
} else {
y <- happy_vs_gen$Generosity
yaxis <- "Generosity Score"
range <- c(0, 8)
}
my_plot <- plot_ly(
happy_vs_gen,
x = happy_vs_gen$Country,
y = y,
marker = list(color = input$color),
type = "bar"
) %>%
layout(
title = paste(input$rank, "of 10 Happiest Countries"),
xaxis = list(title = "Country"),
yaxis = list(title = yaxis, range = range)
)
return(my_plot)
})
}
runApp()
ui <- fluidPage(
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("The")
)
)
)
)
)
library(dplyr)
library(shiny)
library(plotly)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("The")
)
)
)
)
)
runApp()
library(dplyr)
library(shiny)
library(plotly)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if they're was any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation.")
)
)
)
)
)
runApp()
library(dplyr)
library(shiny)
library(plotly)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
"Happiest Countries Data",
tabPanel(
"Happiness Score vs. Generosity",
sidebarLayout(
sidebarPanel(
radioButtons("rank",
"Choose Happiness Score or Generosity",
choices = c("Happiness Score", "Generosity")
),
selectInput("color",
"Choose a color:",
choices = c(
"Red", "Orange", "Yellow",
"Green", "Blue", "Purple",
"Pink", "Black"
)
)
),
mainPanel(plotlyOutput("countries"),
helpText("This page displays a bar chart that compares 10 random
countries with their happiness scores and their generosity
scores. The purpose of choosing these two variables is to
see if there were any correlation between them. From
looking at the bar charts and comparing countries with
the two scores, it looks like there isn't much of a
correlation between a country's happiness score and
its generosity score.")
)
)
)
)
)
runApp()
