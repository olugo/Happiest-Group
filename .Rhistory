)
),
mainPanel(
plotOutput("plot2")
)
)
)
my_ui <- navbarPage(
"Assignment 7",
page_one,
page_two
)
runApp('Desktop/Info201/a7-dark330')
library(shiny)
page_one <- tabPanel(
"Line graph of different statistics",
sidebarLayout(
sidebarPanel(
radioButtons(
"xname",
label = "x value",
choiceNames = list(
"percollege",
"peradultpoverty"),
choiceValues = list(
"percollege",
"percadultpoverty")
)
),
mainPanel(
plotOutput("plot1")
)
)
)
page_two <- tabPanel(
"Population bar chart",
sidebarLayout(
sidebarPanel(
radioButtons(
"state_given",
label = "state",
choiceNames = list(
"IL",
"IN",
"MI",
"OH",
"WI"
),
choiceValues = list(
"IL",
"IN",
"MI",
"OH",
"WI")
),
radioButtons(
"given_color",
label = "line color",
choiceNames = list("blue","red"),
choiceValues = list("blue","red")
)
),
mainPanel(
plotOutput("plot2")
)
)
)
my_ui <- navbarPage(
"Assignment 7",
page_one,
page_two
)
runApp('Desktop/Info201/a7-dark330')
library(shiny)
page_one <- tabPanel(
"Line graph of different statistics",
sidebarLayout(
sidebarPanel(
radioButtons(
"xname",
label = "x value",
choiceNames = list(
"percollege",
"peradultpoverty"),
choiceValues = list(
"percollege",
"percadultpoverty")
),
radioButtons(
"given_color",
label = "line color",
choiceNames = list("blue","red"),
choiceValues = list("blue","red")
)
),
mainPanel(
plotOutput("plot1")
)
)
)
page_two <- tabPanel(
"Population bar chart",
sidebarLayout(
sidebarPanel(
radioButtons(
"state_given",
label = "state",
choiceNames = list(
"IL",
"IN",
"MI",
"OH",
"WI"
),
choiceValues = list(
"IL",
"IN",
"MI",
"OH",
"WI")
)
),
mainPanel(
plotOutput("plot2")
)
)
)
my_ui <- navbarPage(
"Assignment 7",
page_one,
page_two
)
runApp('Desktop/Info201/a7-dark330')
library(shiny)
library(dplyr)
library(ggplot2)
my_server <- function(input,output){
output$plot1 <- renderPlot({
get_line_graph(midwest_dataset,input$xname, "popadults", input$given_color)
})
output$plot2 <- renderPlot({
get_bar_chart(midwest_dataset,input$state_given,input$bar_color)
})
}
midwest_dataset <- midwest
get_line_graph <- function(dataset, xname, yname, given_color){
ggplot(
data = dataset,
aes(x = !!as.name(xname),
y = !!as.name(yname), group = 1)) +
geom_line(color = given_color)+
geom_point(color = given_color) +
ggtitle(paste0(xname, " vs. ", yname)) +
theme(plot.title = element_text(hjust = 0.5))
}
get_bar_chart <- function(dataset, state_wanted, given_color){
temp_dataset <- dataset %>%
select(state,poptotal,popwhite,
popblack,popasian,popother) %>%
filter(state == state_wanted) %>%
summarise(
poptotal = sum(poptotal),
popwhite = sum(popwhite),
popblack = sum(popblack),
popasian = sum(popasian),
popother = sum(popother)) %>%
t() %>% as.data.frame()
bar_chart <- ggplot(temp_dataset, aes(x = rownames(temp_dataset), y = V1)) +
geom_bar(stat = "identity", color = given_color) +
labs(x = "Ethnic groups", y = "Population") +
ggtitle(paste0("Population of ethnic groups in ",state_wanted)) +
theme(plot.title = element_text(hjust = 0.5))
return(bar_chart)
}
runApp('Desktop/Info201/a7-dark330')
library(shiny)
library(dplyr)
library(ggplot2)
my_server <- function(input,output){
output$plot1 <- renderPlot({
get_line_graph(midwest_dataset,input$xname, "popadults", input$given_color)
})
output$plot2 <- renderPlot({
get_bar_chart(midwest_dataset,input$state_given,input$bar_color)
})
}
midwest_dataset <- midwest
get_line_graph <- function(dataset, xname, yname, given_color){
ggplot(
data = dataset,
aes(x = !!as.name(xname),
y = !!as.name(yname), group = 1)) +
geom_line(color = given_color)+
geom_point(color = given_color) +
ggtitle(paste0(xname, " vs. ", yname)) +
theme(plot.title = element_text(hjust = 0.5))
}
get_bar_chart <- function(dataset, state_wanted, given_color){
temp_dataset <- dataset %>%
select(state,poptotal,popwhite,
popblack,popasian,popother) %>%
filter(state == state_wanted) %>%
summarise(
poptotal = sum(poptotal),
popwhite = sum(popwhite),
popblack = sum(popblack),
popasian = sum(popasian),
popother = sum(popother)) %>%
t() %>% as.data.frame()
bar_chart <- ggplot(temp_dataset,
aes(x = rownames(temp_dataset), y = V1),
color = given_color) +
geom_bar(stat = "identity") +
labs(x = "Ethnic groups", y = "Population") +
ggtitle(paste0("Population of ethnic groups in ",state_wanted)) +
theme(plot.title = element_text(hjust = 0.5))
return(bar_chart)
}
runApp('Desktop/Info201/a7-dark330')
library(shiny)
library(dplyr)
library(ggplot2)
my_server <- function(input,output){
output$plot1 <- renderPlot({
get_line_graph(midwest_dataset,input$xname, "popadults", input$given_color)
})
output$plot2 <- renderPlot({
get_bar_chart(midwest_dataset,input$state_given,input$bar_color)
})
}
midwest_dataset <- midwest
get_line_graph <- function(dataset, xname, yname, given_color){
ggplot(
data = dataset,
aes(x = !!as.name(xname),
y = !!as.name(yname), group = 1)) +
geom_line(color = given_color)+
geom_point(color = given_color) +
ggtitle(paste0(xname, " vs. ", yname)) +
theme(plot.title = element_text(hjust = 0.5))
}
get_bar_chart <- function(dataset, state_wanted, given_color){
temp_dataset <- dataset %>%
select(state,poptotal,popwhite,
popblack,popasian,popother) %>%
filter(state == state_wanted) %>%
summarise(
poptotal = sum(poptotal),
popwhite = sum(popwhite),
popblack = sum(popblack),
popasian = sum(popasian),
popother = sum(popother)) %>%
t() %>% as.data.frame()
bar_chart <- ggplot(temp_dataset,
aes(x = rownames(temp_dataset), y = V1)) +
geom_bar(stat = "identity", fill = given_color) +
labs(x = "Ethnic groups", y = "Population") +
ggtitle(paste0("Population of ethnic groups in ",state_wanted)) +
theme(plot.title = element_text(hjust = 0.5))
return(bar_chart)
}
runApp('Desktop/Info201/a7-dark330')
library(shiny)
page_one <- tabPanel(
"Line graph of different statistics",
sidebarLayout(
sidebarPanel(
radioButtons(
"xname",
label = "x value",
choiceNames = list(
"percollege",
"peradultpoverty"),
choiceValues = list(
"percollege",
"percadultpoverty")
),
radioButtons(
"given_color",
label = "line color",
choiceNames = list("blue","red"),
choiceValues = list("blue","red")
)
),
mainPanel(
plotOutput("plot1")
)
)
)
page_two <- tabPanel(
"Population bar chart",
sidebarLayout(
sidebarPanel(
radioButtons(
"state_given",
label = "state",
choiceNames = list(
"IL",
"IN",
"MI",
"OH",
"WI"
),
choiceValues = list(
"IL",
"IN",
"MI",
"OH",
"WI")
),
radioButtons(
"bar_color",
label = "line color",
choiceNames = list("black","white"),
choiceValues = list("black","white")
)
),
mainPanel(
plotOutput("plot2")
)
)
)
my_ui <- navbarPage(
"Assignment 7",
page_one,
page_two
)
runApp('Desktop/Info201/a7-dark330')
library(shiny)
page_one <- tabPanel(
"Line graph of different statistics",
sidebarLayout(
sidebarPanel(
radioButtons(
"xname",
label = "x value",
choiceNames = list(
"percollege",
"peradultpoverty"),
choiceValues = list(
"percollege",
"percadultpoverty")
),
radioButtons(
"given_color",
label = "line color",
choiceNames = list("blue","red"),
choiceValues = list("blue","red")
)
),
mainPanel(
plotOutput("plot1")
)
)
)
page_two <- tabPanel(
"Population bar chart",
sidebarLayout(
sidebarPanel(
radioButtons(
"state_given",
label = "state",
choiceNames = list(
"IL",
"IN",
"MI",
"OH",
"WI"
),
choiceValues = list(
"IL",
"IN",
"MI",
"OH",
"WI")
),
radioButtons(
"bar_color",
label = "line color",
choiceNames = list("black","grey"),
choiceValues = list("black","grey")
)
),
mainPanel(
plotOutput("plot2")
)
)
)
my_ui <- navbarPage(
"Assignment 7",
page_one,
page_two
)
runApp('Desktop/Info201/a7-dark330')
styler:::style_active_file()
styler:::style_active_pkg()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(shiny)
library(dplyr)
library(ggplot2)
midwest_dataset <- midwest
# main server function that takes input from UI and
# produces output
my_server <- function(input, output) {
output$plot1 <- renderPlot({
get_line_graph(midwest_dataset, input$xname, "popadults", input$given_color)
})
output$plot2 <- renderPlot({
get_bar_chart(midwest_dataset, input$state_given, input$bar_color)
})
}
# helper function that takes in a dataframe, two column names of the
# date frame, and string representation of color,
# and generates a ggplot line graph that fits these specifications
get_line_graph <- function(dataset, xname, yname, given_color) {
ggplot(
data = dataset,
aes(x = !!as.name(xname),
y = !!as.name(yname), group = 1)) +
geom_line(color = given_color) +
geom_point(color = given_color) +
ggtitle(paste0(xname, " vs. ", yname)) +
theme(plot.title = element_text(hjust = 0.5))
}
# helper function that takes in a dataframe, two string variables that
# represent state and color, and generates and returns a ggplot bar chart
# that fits these specifications
get_bar_chart <- function(dataset, state_wanted, given_color) {
temp_dataset <- dataset %>%
select(state, poptotal, popwhite,
popblack, popasian, popother) %>%
filter(state == state_wanted) %>%
summarise(
poptotal = sum(poptotal),
popwhite = sum(popwhite),
popblack = sum(popblack),
popasian = sum(popasian),
popother = sum(popother)) %>%
t() %>% as.data.frame()
bar_chart <- ggplot(temp_dataset,
aes(x = rownames(temp_dataset), y = V1)) +
geom_bar(stat = "identity", fill = given_color) +
labs(x = "Ethnic groups", y = "Population") +
ggtitle(paste0("Population of ethnic groups in ",state_wanted)) +
theme(plot.title = element_text(hjust = 0.5))
return(bar_chart)
}
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
install.packages(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='yx99',
token='2C8D8C6D64220285613636BD23456C88',
secret='<SECRET>')
rsconnect::setAccountInfo(name='yx99',
token='2C8D8C6D64220285613636BD23456C88',
secret='b+9co9lMF6KVB4lb31ZTXM9LIO2fh2nXzWizcrXY')
runApp('Desktop/Info201/a7-dark330')
library(shiny)
library(leaflet)
prediction_page <- tabPanel(
"page1",
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "gdp",
label = "GDP per capita",
min = 0,
max = 1.87,
value = 0,
round = -2
),
sliderInput(
inputId = "life_exp",
label = "Life expectancy",
min = 0,
max = 0.95,
value = 0,
round = -2
),
sliderInput(
inputId = "freedom",
label = "Freedom score",
min = 0,
max = 0.66,
value = 0,
round = -2
),
sliderInput(
inputId = "generosity",
label = "Generosity",
min = 0,
max = 0.84,
value = 0,
round = -2
)
),
mainPanel(
leafletOutput("world_map", width = "10%", height = "10%")
)
)
)
my_ui <- navbarPage(
"nav",
prediction_page
)
runApp('Desktop/Info201/Happiest-Group')
