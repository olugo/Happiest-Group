}
inches_tall <- 68
cm_tall <- inches_to_cm(inches_tall)
?function
?function
has_more_zs <- function(string1, string2) {
counts1 <- str_count(tolower(string1), pattern = "z")
counts2 <- str_count(tolower(string2), pattern = "z")
if (counts1 > counts2) {
result <- string1
} else if (counts1 <counts2) {
result <- string2
} else if(counts1 == 0 && counts2 == 0) {
result <- "Neither string contains the letter Z"
} else {
result <- "The string contains the letter z"
} else {
result <- "The strings have the same number of Z's"
}
result
}
has_more_zs <- function(string1, string2) {
counts1 <- str_count(tolower(string1), pattern = "z")
counts2 <- str_count(tolower(string2), pattern = "z")
if (counts1 > counts2) {
result <- string1
} else if (counts1 <counts2) {
result <- string2
} else if(counts1 == 0 && counts2 == 0) {
result <- "Neither string contains the letter Z"
}  else {
result <- "The strings have the same number of Z's"
}
result
}
more_zs <- has_more_zs("Henry Zuzallo never went to the Zoo", "Zika virus is still a thing.")
more_zs <- has_more_zs("Henry Zuzallo never went to the Zoo", "Zika virus is still a thing")
remove_digits <- function(vector_strings) {
result <- gsub("[0-9]+", "", vector_strings)
result
}
remove_digits(c("INFO 201", "CSE 142"))
movies <- c('la mala educacion','the godfather','pulp fiction','tweleve angry men','goodfellas','rocky')
top_three <- movies[1:3]
excited <- paste(movies," is a great movie!")
without_four <- c(movies[1:3],movies[5:6])
input = 4:400
multiples_of_4 = (input %% 4) == 0
head(multiples_of_4)
input = 4:400
multiples_of_4 = (input %% 4)
head(multiples_of_4)
input = 4:400
multiple_of_8 = (input %% 8) == 0
head(multiple_of_8)
input[multiples_of_4]
input = 4:400
multiples_of_4 = (input %% 4) == 0
head(multiples_of_4)
input[multiples_of_4]
input = 4:400
multiples_of_4 = (input %% 4) == 0
input[multiples_of_4]
multiples_of_4 <- input[multiples_of_4]
numbers <- 700:999
multiples_of_8 <- input[multiples_of_4 %% 8]
len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
lower_numbers <- numbers_mean < numbers
print(lower_numbers)
lower_numbers <- numbers_mean > numbers
print(lower_numbers)
lower_numbers[numbers_mean > numbers]
print(lower_numbers)
lower_numbers[numbers_mean > numbers]
print(lower_numbers)
lower_numbers[numbers_mean]
lower_numbers <- numbers[numbers_mean]
print(lower_numbers)
lower_numbers[numbers > numbers_mean]
lower_numbers <- numbers[numbers_mean]
print(lower_numbers)
lower_numbers <- numbers[numbers_mean]
lower_numbers[numbers > numbers_mean]
print(lower_numbers)
lower_numbers <- numbers[numbers_mean]
lower_numbers <- numbers > numbers_mean
numbers_median <- median(numbers)
lower_numbers <- numbers < numbers_mean
lower_numbers <- c(numbers)
filter <- lower_numbers < numbers_mean
lower_numbers <- lower_numbers[filter]
higher_numbers <- c(numbers)
filter <- higher_numbers > numbers_mean
higher_numbers <- higher_numbers[filter]
summary_info <- list(length, mean, median)
summarize_vector <- function(summary_info, numbers)
View(has_more_zs)
summarize_vector <- function(summary_info, numbers)
View(summary_info)
summary_info <- list(length(numbers), mean(numbers), median(numbers))
summarize_vector <- function(summary_info)
summarize_vector = function(x) {
+ list(mean = mean(x), median = median(x), variance = var(x))
+ }
summarize_vector <- function(x) {
+ list(mean = mean(x), median = median(x), variance = var(x))
+ }
summarize_vector <- function(summarize_vector){
+ list(mean = mean(x), median = median(x), variance = var(x)) + }
summarize_vector <- function(summarize_vector){
list(mean = mean(x), median = median(x), variance = var(x))
}
summarize_vector <- function(mean, median, length){
list(mean = mean(x), median = median(x), length() = length(x))
}
summarize_vector <- function(mean, median, length){
list(mean = mean(x), median = median(x), length = length(x))
}
summary_1_to_100 <- 1:100
summary_1_to_100 <- summarize_vector
summary_1_to_100 <- summarize_vectors(1:100)
summary_1_to_100 <- summarize_vector(1:100)
summary_1_to_100 <- summarize_vector(1:100)
summary_1_to_100 <- summarize_vector
summarize_vector <- function(num){
summary_info <- list(mean =mean(num), median = median(num), length = length(num))
summary_info
}
summary_1_100 <- summarize_vector(c(1:100))
?num
summarize_vector <- function(numbers){
summary_info <- list(mean =mean(numbers), median = median(numbers), length = length(numbers))
summary_info
}
summary_1_100 <- summarize_vector(c(1:100))
summary_1_100 <- summarize_vector(c(1:500))
summary_1_100 <- summarize_vector(c(1:100))
# a3-using-data
# Before you get started, set your working directory using the Session menu
###################### Data Frame Manipulation (24 POINTS) #####################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste("Student", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- rnorm(100, mean = 88, sd = 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(1000, mean = 85, sd = 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades[spanish_grades > 100] <- 100
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `grades` minus one (b/c of their names)
num_courses <- ncol(grades) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grades$grade_diff <- grades$math_grades - grades$spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
grades$better_at_math <- grades$math_grades > grades$spanish_grades
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- nrow(grades[grades$math_grades > grades$spanish_grades,])
# Write your `grades` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
# (you'll need to create the `data/` directory, which you can do outside of R)
write.csv(grades, "data/grades.csv", row.names = FALSE)
########################### Built in R Data (28 points) ########################
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
data("Titanic")
is.data.frame("Titanic")
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# It's important to understand the _meaning_ of each column before analyzing it
# Using comments below, describe what information is stored in each column
# For categorical variables, list all possible values
# Class: 1st, 2nd, 3rd, Crew
# Sex: Male, Female
# Age: Child, Adult
# Survived: Yes, No
# Freq: Total number of people in their specific categories, including class, sex,
# and wether they survived.
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
children <- titanic_df[titanic_df$Age == "Child",]
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
max_death <- max(titanic_df$Freq)
most_lost <- titanic_df[titanic_df$Freq == max_death,]
# Define a function called `survival_rate()` that takes in two arguments:
# - a ticket class (e.g., "1st", "2nd"), and
# - the dataframe itself (it's good practice to explicitly pass in data frames)
# This function should return the following
# sentence that states the *survival rate* (# survived / # in group)
# of adult men and "women and children" in that ticketing class.
# It should read (for example):
# Of Crew class, 87% of women and children survived and 22% of men survived.
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
# You must round values and present them as percentages in the sentence.
View(titanic_df)
View(titanic_df)
survival_rate <- function(class_of_tix, table) {
class <- table[table$Class == class_of_tix,]
male_adult <- class[class$Age == "Child" | class$Sex == "Male" & class$Age == "Adult",]
wom_child <- class[class$Age == "Child" | class$Sex == "Female" & class$Age == "Adult",]
male_total <- sum(male_adult$Freq)
fem_chi_total <- sum(wom_child$Freq)
male_surv <- sum(male_adult[male_adult$Survived == "Yes", "Freq"])
fem_chi_surv <-  sum(wom_child[wom_child$Survived == "Yes", "Freq"])
men_surv_rate <- round((male_surv / male_total) * 100, digits = 0)
fem_chi_rate <- round((fem_chi_surv / fem_chi_total) * 100, digits = 0)
string_result <- paste("Of ",class_of_tix, "Class,",fem_chi_rate, "% of women and children survived and ",men_surv_rate, "% of men survived.", sep = "")
string_result
}
first_survived <- survival_rate("1st ", titanic_df)
first_survived <- survival_rate("1st", titanic_df)
?paste
survival_rate <- function(class_of_tix, table) {
class <- table[table$Class == class_of_tix,]
male_adult <- class[class$Age == "Child" | class$Sex == "Male" & class$Age == "Adult",]
wom_child <- class[class$Age == "Child" | class$Sex == "Female" & class$Age == "Adult",]
male_total <- sum(male_adult$Freq)
fem_chi_total <- sum(wom_child$Freq)
male_surv <- sum(male_adult[male_adult$Survived == "Yes", "Freq"])
fem_chi_surv <-  sum(wom_child[wom_child$Survived == "Yes", "Freq"])
men_surv_rate <- round((male_surv / male_total) * 100, digits = 0)
fem_chi_rate <- round((fem_chi_surv / fem_chi_total) * 100, digits = 0)
string_result <- paste("Of",class_of_tix, " Class, ",fem_chi_rate, "% of women and children survived and ",men_surv_rate, "% of men survived.", sep = "")
string_result
first_survived <- survival_rate("1st", titanic_df)
survival_rate <- function(class_of_tix, table) {
class <- table[table$Class == class_of_tix,]
male_adult <- class[class$Age == "Child" | class$Sex == "Male" & class$Age == "Adult",]
wom_child <- class[class$Age == "Child" | class$Sex == "Female" & class$Age == "Adult",]
male_total <- sum(male_adult$Freq)
fem_chi_total <- sum(wom_child$Freq)
male_surv <- sum(male_adult[male_adult$Survived == "Yes", "Freq"])
fem_chi_surv <-  sum(wom_child[wom_child$Survived == "Yes", "Freq"])
men_surv_rate <- round((male_surv / male_total) * 100, digits = 0)
fem_chi_rate <- round((fem_chi_surv / fem_chi_total) * 100, digits = 0)
string_result <- paste("Of",class_of_tix, " Class, ",fem_chi_rate, "% of women and children survived and ",men_surv_rate, "% of men survived.", sep = "")
string_result
}
first_survived <- survival_rate("1st", titanic_df)
second_survived <- survival_rate("2nd", titanic_df)
third_survived <- survival_rate("3rd", titanic_df)
first_survived <- survival_rate("1st", titanic_df)
second_survived <- survival_rate("2nd", titanic_df)
third_survived <- survival_rate("3rd", titanic_df)
crew_survived <- survival_rate("Crew", titanic_df)
library(ggplot2)
midwest
ggplot(data = midwest) +
geom_point(mapping =
aes(x = percollege, y = percadultpverty)
)
midwest
ggplot(data = midwest) +
geom_point(mapping =
aes(x = percollege, y = peradultpoverty)
)
ggplot(data = midwest) +
geom_point(mapping =
aes(x = percollege, y = percadultpoverty)
)
install.packages("hexbin")
ggplot(data = midwest) +
geom_hex(mapping =
aes(x = percollege, y = percadultpoverty)
)
View(midwest)
library("dplyr")
library("ggmap")
library("ggplot2")
install.packages("ggmap")
library("ggmap")
library("ggplot2")
library("ggmap")
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap")
library("ggmap")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
quiz5 <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(quiz5) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
quiz5 <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(quiz5) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
quiz5 <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(quiz5) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
```{r}
x <- 5
#This is a line of markdown that shows the value of a variable `x`: it 's value is `r x`.
```
```{r calc_x}
# In this code chunk, assign a value to the variable `x`
x <- 100
````
labs(color = "Year")
```{r}
x <- 5
#This is a line of markdown that shows the value of a variable `x`: it 's value is `r x`.
```
This is a line of markdown that shows the value of a variable `x`: it 's value is `r x`.
```
```{r calc_x}
# In this code chunk, assign a value to the variable `x`
x <- 100
````
labs(color = "Year")
library(ggplot2)
library(dplyr)
?diamonds
data("diamonds")
data("diamonds")
diamond_data <- data.frame(diamonds, stringsAsFactors = F)
diamonds_sample < - sample_n(diamonds, 1000)
diamonds_sample < - sample_n(diamonds_data, 1000)
diamonds_sample <- sample_n(diamonds_data, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
View(diamonds_sample)
View(diamonds_sample)
ggplot(data = diamond_sample)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamond_data) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity, position = "fill"))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill"))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = clarity), position = "jitter")
View(diamonds)
View(diamonds)
View(diamonds)
geom_boxplot(mapping = aes (x = color, y = price))
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
install.packages('ggmap')
library(ggmap)
qmap("Seattle")
?register_google
install.packages(httr)
install.packages('httr')
install.packages("httr")
library(httr)
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
uri_full <- paste0(base_uri, endpoint)
query_params <- list(q = dplyr, sort = "forks")
response <- GET(uri_full, query = query_params
response_content <- content(response, "text")
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
uri_full <- paste0(base_uri, endpoint)
query_params <- list(q = dplyr, sort = "forks")
response <- GET(uri_full, query = query_params)
response_content <- content(response, "text")
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
uri_full <- paste0(base_uri, endpoint)
query_params <- list(q = dplyr, sort = "forks")
response <- GET(uri_full, query = query_params)
response_content <- content(response, "text")
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
uri_full <- paste0(base_uri, endpoint)
query_params <- list(q = dplyr, sort = "forks")
query_params <- list(q = "dplyr", sort = "forks")
response <- GET(uri_full, query = query_params)
response_content <- content(response, "text")
View(response)
View(response)
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/happiest-group")
happiness_alcohol <- read.csv("data/HappinessAlcoholConsumption.csv", stringsAsFactors=FALSE)
nrow(happiness_alcohol)
ncol(happiness_alcohol)
View(happiness_alcohol)
- All four questions from above can be answered using the data in this datasets.
setwd("~/Documents/Schooling/Autumn 2019/Info 201A/working folder/happiest-group")
