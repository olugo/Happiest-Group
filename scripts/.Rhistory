# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c((1:100) * 4)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
"length" <- numbers_len, "mean" <- numbers_mean,
"median" <- numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(numbers) {
list(
"length" <- length(numbers),
"mean" <- mean(numbers), "median" <- median(numbers)
)
}
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
library(pscl)
library(dplyr)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
nycFlights <- flights
lga <- gather(nycFlights,flightNumber,delayTime,arr_delay)
library(pscl)
library(nycflights13)
library(dplyr)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
nycFlights <- flights
lga <- gather(nycFlights,flightNumber,delayTime,arr_delay)
View(lga)
View(lga)
library(pscl)
library(nycflights13)
library(dplyr)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
nycFlights <- flights
lga <- gather(nycFlights,flightNumber,delayTime,flight,arr_delay)
View(nycFlights)
View(nycFlights)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
```{r calc_x}
# In this code chunk, assign a value to the variable `x`
x <- 100
```
midwest
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
install.packages("hexbin")
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
happiness_2017 <- read.csv2(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(happiness_2017) {
ret <- list()
ret$length <- length(happiness_2017)
ret$num_col <- ncol(happiness_2017)
ret$num_row <- nrow(happiness_2017)
ret$happiest_country <- happiness_2017 %>%
arrange(-Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
ret$unhappiest_country <- happiness_2017 %>%
arrange(Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
return (ret)
}
happiness_2017 <- read.csv2(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(happiness_2017) {
ret <- list()
ret$length <- length(happiness_2017)
ret$num_col <- ncol(happiness_2017)
ret$num_row <- nrow(happiness_2017)
ret$happiest_country <- happiness_2017 %>%
arrange(-Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
ret$unhappiest_country <- happiness_2017 %>%
arrange(Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
return (ret)
}
View(get_summary_info)
View(get_summary_info)
setwd("~/")
happiness_2017 <- read.csv2(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(happiness_2017) {
ret <- list()
ret$length <- length(happiness_2017)
ret$num_col <- ncol(happiness_2017)
ret$num_row <- nrow(happiness_2017)
ret$happiest_country <- happiness_2017 %>%
arrange(-Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
ret$unhappiest_country <- happiness_2017 %>%
arrange(Happiness.Rank) %>% select(Country) %>%
top_n(1) %>% pull
return (ret)
}
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(dataset) {
ret <- list()
ret$length <- length(dataset)
ret$num_col <- ncol(dataset)
ret$num_row <- nrow(dataset)
ret$happiest_country <- dataset %>%
arrange(Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,-Happiness.Rank) %>% pull(Country)
ret$unhappiest_country <- dataset %>%
arrange(-Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,Happiness.Rank) %>% pull(Country)
return (ret)
}
c1 <- happiness_2017 %>% get_summary_info()
setwd("~/")
setwd("~/Desktop/Info201/Happiest-Group/scripts")
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(dataset) {
ret <- list()
ret$length <- length(dataset)
ret$num_col <- ncol(dataset)
ret$num_row <- nrow(dataset)
ret$happiest_country <- dataset %>%
arrange(Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,-Happiness.Rank) %>% pull(Country)
ret$unhappiest_country <- dataset %>%
arrange(-Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,Happiness.Rank) %>% pull(Country)
return (ret)
}
c1 <- happiness_2017 %>% get_summary_info()
View(happiness_2017)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(dataset) {
ret <- list()
ret$length <- length(dataset)
ret$num_col <- ncol(dataset)
ret$num_row <- nrow(dataset)
ret$happiest_country <- dataset %>%
arrange(Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,-Happiness.Rank) %>% pull(Country)
ret$unhappiest_country <- dataset %>%
arrange(-Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,Happiness.Rank) %>% pull(Country)
ret$highest_happiness_score <- dataset %>%
arrange(Happiness.Score) %>%
select(Happiness.Score) %>%
top_n(1,-Happiness.Score) %>% pull()
ret$lowest_happiness_score <- dataset %>%
arrange(-Happiness.Score) %>%
select(Happiness.Score) %>%
top_n(1,Happiness.Score) %>% pull()
return (ret)
}
c1 <- happiness_2017 %>% get_summary_info()
View(c1)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
get_summary_info <- function(dataset) {
ret <- list()
ret$length <- length(dataset)
ret$num_col <- ncol(dataset)
ret$num_row <- nrow(dataset)
ret$happiest_country <- dataset %>%
arrange(Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,-Happiness.Rank) %>% pull(Country)
ret$unhappiest_country <- dataset %>%
arrange(-Happiness.Rank) %>%
select(Country,Happiness.Rank) %>%
top_n(1,Happiness.Rank) %>% pull(Country)
ret$highest_happiness_score <- dataset %>%
arrange(Happiness.Score) %>%
select(Happiness.Score) %>%
top_n(1,Happiness.Score) %>% pull()
ret$lowest_happiness_score <- dataset %>%
arrange(-Happiness.Score) %>%
select(Happiness.Score) %>%
top_n(1,-Happiness.Score) %>% pull()
return (ret)
}
c1 <- happiness_2017 %>% get_summary_info()
View(c1)
View(c1)
View(happiness_2017)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>% mutate(life_exp = round(happiness_2017$Health..Life.Expectancy.))
View(c1)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(life_exp = round(happiness_2017$Health..Life.Expectancy.,2))
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(life_exp = round(happiness_2017$Health..Life.Expectancy.,2)) %>%
select(Happiness.Score,life_exp)
View(c1)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(Economy = round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,Economy) %>% group_by(Economy)
View(c1)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(Economy = round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,Economy) %>% group_by(Economy) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
View(c1)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
View(c1)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita)
%>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
}
c2 <- aggregate_table(happiness_2017)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita)
%>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
return(dataset)
}
c2 <- aggregate_table(happiness_2017)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita)
%>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
return(dataset)
}
c2 <- aggregate_table(happiness_2017)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita) %>%
group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
return(dataset)
}
c2 <- aggregate_table(happiness_2017)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita) %>%
group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
}
c2 <- aggregate_table(happiness_2017)
View(c1)
View(c2)
View(c1)
library(dplyr)
happiness_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
c1 <- happiness_2017 %>%
mutate(GDP_per_capita= round(happiness_2017$Economy..GDP.per.Capita.,2)) %>%
select(Happiness.Score,GDP_per_capita) %>% group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score))
aggregate_table <- function(dataset){
dataset %>%
mutate(
GDP_per_capita = round(dataset$Economy..GDP.per.Capita.,2)
) %>%
select(Happiness.Score,GDP_per_capita) %>%
group_by(GDP_per_capita) %>%
summarise(Average_happiness_score = mean(Happiness.Score)) %>%
arrange(GDP_per_capita)
}
c2 <- aggregate_table(happiness_2017)
View(c2)
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/happiest-group/scripts")
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
get_happiness_vs_health <- function(dataset){
dataset <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
}
setwd("~/Desktop/info201/happiest-group/scripts")
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
get_happiness_vs_health <- function(dataset){
dataset <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
}
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
setwd("~/Desktop/info201/happiest-group/scripts")
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
graph_2017
get_happiness_vs_health <- function(dataset){
dataset <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
}
# Happiness score/rank vs Health.Life.Expectancy
# Dataset is read from a csv file
year_2017 <- read.csv(file = "../data/world-happiness/2017.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
# A function takes in the year and health data from dataset.
# Makes the Line chart with a title and an x and y variable.
graph_2017 <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
# Convert it to a graph.
get_happiness_vs_health <- function(dataset){
dataset <- ggplot(data = year_2017, aes(x = Health..Life.Expectancy., y = Happiness.Score, group = 1)) +
geom_line ()+
geom_point ()+
ggtitle("2017 Happiness Score V.S. Health Life.Expectancy")
}
get_happiness_vs_health(year_2017)
